pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--[[ 
** REMINDERS **
CONTROL +K +J = unfold all
CONTROL +K +1 = fold at level 1 
U, D, L, R, O, and X are the buttons (up, down, left, right, o-button, x-button)

Furlock Bones: Consulting Dogtective
]]

--init, update, draw and draw functions
function _init()
	-- debug_mode = false
	camera_x = 0
	camera_y = 0
	activeGame = false
	anim_time = 0
	anim_wait = 0.1	
	create_player()
	create_brian()	
	init_conversation_text()		
	poke(0x5f5c, 255) -- this means a held button (btnp) only registers once
	readingSign = false	
	notNowBrian = false
	current_map_maximum_x = 624
	current_map_maximum_y = 248
end

_n = nil _={}
_[0] = false 
_[1] = true

-- create 6-bit table (used for map swapping)
chr6,asc6,char6={},{},"abcdefghijklmnopqrstuvwxyz.1234567890 !@#$%,&*()-_=+[{]};:'|<>/?"
for i=0,63 do
c=sub(char6,i+1,i+1) chr6[i]=c asc6[c]=i
end
char6=_n

function _update60()
	if activeGame == true  then 
		--toggle_debug_mode()	
		animate_player()		
		move_player() -- MUST be before camera_follow_player
		camera_follow_player() -- MUST be after move_player
		conversation_system()
		move_brian()		
		check_if_next_to_sign()		
	else -- if still on menu
		if (btnp(‚ùé)) then activeGame = true end
	end	

	if (btnp(üÖæÔ∏è)) then
		-- compress current map 128x16 into variable squish
		--squish=compressmap(0,0,128,16)
		decompressmap(0,0,map0)
		--printh(squish, "temp", 1)
	end

	
end

function _draw()
	cls()	
	if activeGame == false then draw_menu() end
	if activeGame == true then
		draw_game()				
		if text.active == true then draw_conversation()	end -- draw player conversations when required
	end	
	-- if (debug_mode == true) then		
	-- 	print("player x: "..player.x,player.x,player.y-10,8)		
	-- 	print(camera_x)
	-- end		
end

function camera_follow_player()
	if player.x > 60 and player.x <= (current_map_maximum_x -60) then 
		camera_x = player.x - 60
	end
	if player.y > 60 and player.y <= (current_map_maximum_y-60) then
		camera_y = player.y - 60
	end
end

function draw_menu()	
	format_text_centered(text_array, 7) -- display menu text	
end

function draw_game()
 	camera(camera_x,camera_y)
 	map(0,0,0,0,128,32)
	spr(110,80,16,1,1,1)
	spr(126,80,24,1,1,1)
 	spr(player.sprite,player.x,player.y,1,1,player.direction==-1)
	spr(brian.sprite,brian.x,brian.y,1,1,brian.direction==-1)	
end

-->8
--player functions
function create_player() 
	player={}  --create empty table -- this means we're creating the player as an object!
	player.x = 464 -- map location x8 for exact pixel location
	player.y = 40
	player.direction = 1
	player.velocity_x = 0
	player.velocity_y = 0	
	player.max_x_speed = 1
	player.max_y_speed = 1	
	player.acceleration = 0.2
	player.drag = 0.7 -- 1 = no slow down, 0 = instant halt
	player.width = 7
	player.height = 7
	player.sprite = 1
end

function animate_player()
	if player.velocity_x != 0 or player.velocity_y != 0 then
		if time() - anim_time > anim_wait then
			player.sprite += 1
			anim_time = time()
			if (player.sprite > 4 ) then
				player.sprite = 1
			end
		end	
	else
		anim_time = 0
		player.sprite = 1
	end
end

function move_player()	
	if conversation_state != "level2" then	-- if talking then don't walk away, it's rude.
		--when the user tries to move, only add the acceleration to the current speed.
		if (btn(‚¨ÖÔ∏è)) then 
			player.velocity_x -= player.acceleration
			player.direction = -1
		end
		if (btn(‚û°Ô∏è)) then 
			player.velocity_x += player.acceleration
			player.direction = 1
		end
		if (btn(‚¨ÜÔ∏è)) then 
			player.velocity_y -= player.acceleration		
		end
		if (btn(‚¨áÔ∏è)) then 
			player.velocity_y += player.acceleration		
		end

		-- max negative speed, player direction, max positive speed
		-- So if player.direction tries to exceed max, we refer to either - or + max instead
		-- essentially we ignore what player trying to do, until speed reduces
		player.velocity_x = mid(-player.max_x_speed,player.velocity_x,player.max_x_speed)
		player.velocity_y = mid(-player.max_y_speed,player.velocity_y,player.max_y_speed)

		-- if player still moving
		if (player.velocity_x != 0) or (player.velocity_y != 0) then

			-- call check_if_next_to_wall function for collision before letting player move
			-- essentially this allows play to move diaganolly along a solid object, as without this
			-- the can_move code prevents them moving
			check_if_next_to_wall(player)

			-- check player isn't trying to move into a solid object
			if (can_move(player, player.velocity_x, player.velocity_y)) then
				--actually move the player to the new location
				player.x += player.velocity_x
				player.y += player.velocity_y
				
			-- if player cannot move there, find out how close they can get and move them there instead.
			else 
				--create temporary variables to store how far the player is trying to move
				temp_direction_x = player.velocity_x
				temp_direction_y = player.velocity_y
				
				--make tempx,tempy shorter and shorter until we find a new position the player can move to
				while (not can_move(player,temp_direction_x,temp_direction_y)) do
					
					--if x movement has been shortened so much that it's practically 0, set it to 0
					if (abs(temp_direction_x) <= 0.1) then
						temp_direction_x = 0  	
						--but if it's not too small, make it 90% of what it was before. 
						-- this shortens the amount the player is trying to move in that direction.
					else
						temp_direction_x *= 0.9
					end
					
					--do the same thing for y movement
					if (abs(temp_direction_y) <= 0.1) then
						temp_direction_y = 0
					else
						temp_direction_y *= 0.9
					end  	  	
				end

			--now we've found a distance the player can move, actually move them there
			player.x += temp_direction_x
			player.y += temp_direction_y
			end 
		end	
	end
 
	-- if the player's still moving, then slow them down just a bit using the drag amount.
	-- Note: this actually takes effect whilst player trying to move, so I think it should only be
	-- used if player not pressing a button otherwise player cant reach top speed
	if (abs(player.velocity_x) > 0) player.velocity_x *= player.drag
	if (abs(player.velocity_y) > 0) player.velocity_y *= player.drag
	
	--if they are going slow enough in a particular direction, bring them to a halt.
	if (abs(player.velocity_x)<0.02) player.velocity_x = 0
	if (abs(player.velocity_y)<0.02) player.velocity_y = 0	
end

function check_if_next_to_sign()
	if (is_sign(player, player.velocity_x, player.velocity_y)) and readingSign == false then
		conversation_state = "sign"
		readingSign = true		
	elseif not (is_sign(player, player.velocity_x, player.velocity_y)) and readingSign == true then
		readingSign = false
		conversation_state = "level0"			
		text.active = false			
	end
end

-->8
-- character functions
function create_brian()
	brian={}
	brian.x = 74
	brian.y = 24
	brian.sprite = 5
	brian.speed = 0.2
	brian.direction = -1
end

function move_brian()
	if (brian_collision(player.x,player.y,brian.x,brian.y)) == true then 
		-- this just stops Brian moving any closer and stops him pestering for a while		
	else
		-- check that Brian hasn't recently pestered player
		if notNowBrian == true then
			if (time() >= brianWaiting +20 ) then
				notNowBrian = false
			else return end
		else
			if player.x < brian.x then
				brian.x -= brian.speed
				brian.direction = -1
			end 
			if player.x > brian.x then	 	
				brian.x += brian.speed
				brian.direction = 1
			end 
			if player.y < brian.y then
				brian.y -= brian.speed
			end 
			if player.y > brian.y then
				brian.y += brian.speed
			end
		end
	end
end

function brian_collision(playerx,playery,charx,chary)
	if charx +10 > playerx and charx < playerx +10 and chary +10 > playery and chary < playery +10 then
	brian.speed = 0
  		if conversation_state == "level0" then			
			conversation_state = "level1"
			talking_to = "brian"
			notNowBrian = true
			brianWaiting = time()
		end 
	else
		if talking_to == "brian" then -- if player walks away instead of starting conversation			
			brian.speed = 0.2	 	
			conversation_state = "level0"
			talking_to = "nobody"
			text.active = false
		end
 	end
end

-->8
-- player collision functions
function check_if_next_to_wall(player)
	-- if player next to a wall stop them moving in that direction
	-- essentially this allows player to move along a wall holding two buttons. e.g. up and left
	-- what happens is that we ignore the left movement as it is set to zero meaning that we only
	-- apply the vertical movement. It's really just a player UX fix.
	-- player moving left
	if (player.velocity_x < 0) then
		--check both left corners for a wall
		local wall_top_left = solid(player.x -1, player.y)
		local wall_btm_left = solid(player.x -1, player.y + player.height)
		-- if wall in that direction, set x movement to 0
		if (wall_top_left or wall_btm_left) then
			player.velocity_x = 0
		end

	-- player moving right
	elseif (player.velocity_x > 0) then
		--check both right corners for a wall
		local wall_top_right = solid(player.x + player.width + 1, player.y)
		local wall_btm_right = solid(player.x + player.width + 1, player.y + player.height)

		--if there is a wall in that direction, set x movement to 0
		if (wall_top_right or wall_btm_right) then
			player.velocity_x = 0
		end
	end

	-- player moving up
	if (player.velocity_y < 0) then
		--check both top corners for a wall
		local wall_top_left = solid(player.x, player.y - 1)
		local wall_top_right = solid(player.x + player.width, player.y - 1)
		--if there is a wall in that direction, set y movement to 0
		if (wall_top_left or wall_top_right) then
			player.velocity_y = 0
		end

	-- player moving down
	elseif (player.velocity_y > 0) then
		--check both bottom corners for a wall
		local wall_btm_left = solid(player.x, player.y + player.height + 1)
		local wall_btm_right = solid(player.x, player.y + player.height + 1)
		--if there is a wall in that direction, set y movement to 0
		if (wall_btm_right or wall_btm_left) then
			player.velocity_y = 0
		end
	end 
end

function can_move(object,direction_x,direction_y)
	--this function takes an object (only player currently) and it's x,y speed. It uses these
	--to check the four corners of the object to see it can move into that spot. (a map tile
	--marked as solid would prevent movement into that spot.)
	-- capture x,y coords for where trying to move
	local next_left = object.x + direction_x	
	local next_right = object.x + direction_x + object.width
	local next_top = object.y + direction_y
	local next_bottom = object.y + direction_y + object.height	
	-- BUG: getting stuck on edge if moving diagonal down/left (might be in check_if_next_to_a_wall)

	-- get x,y for each corner based on where trying to move, then use solid to convert that to a 
	-- map tile location and check if any solid sprites there
	local top_left_solid = solid(next_left, next_top)
	local btm_left_solid = solid(next_left, next_bottom)
	local top_right_solid = solid(next_right, next_top)
	local btm_right_solid = solid(next_right, next_bottom)

	--if all of those locations are NOT solid, the object can move into that spot.
	-- this is why it's return NOT so we get (I think) a true returned as if all 4 are false we can move there
	return not (top_left_solid or btm_left_solid or	top_right_solid or btm_right_solid)
end

function is_sign(object,direction_x,direction_y)
	-- copy of can_move so should refactor to work for both rather than duplicate it like this
	--this function takes an object (only player currently) and it's x,y speed. It uses these
	--to check the four corners of the object to see it can move into that spot. (a map tile
	--marked as solid would prevent movement into that spot.)
	-- capture x,y coords for where trying to move
	local next_left = object.x + direction_x	
	local next_right = object.x + direction_x + object.width
	local next_top = object.y + direction_y
	local next_bottom = object.y + direction_y + object.height		

	-- get x,y for each corner based on where trying to move, then use solid to convert that to a 
	-- map tile location and check if any solid sprites there
	local top_left_solid = nextToSign(next_left, next_top)
	local btm_left_solid = nextToSign(next_left, next_bottom)
	local top_right_solid = nextToSign(next_right, next_top)
	local btm_right_solid = nextToSign(next_right, next_bottom)

	--if all of those locations are NOT solid, the object can move into that spot.
	-- this is why it's return NOT so we get (I think) a true returned as if all 4 are false we can move there
	return (top_left_solid or btm_left_solid or	top_right_solid or btm_right_solid)
end

function solid(x,y)	
	--checks x,y of player/object against the map to see if sprite marked as solid
	-- divide x,y by 8 to get map coordinates
	local map_x = flr(x/8)
	local map_y = flr(y/8)	
	-- find what sprite is at that map x,y
	local map_sprite = mget(map_x,map_y) 
	-- and get what flag it has set
	local flag = fget(map_sprite) 
	return flag == 1 
end

function nextToSign(x,y)
	local map_x = flr(x/8)
	local map_y = flr(y/8)	
	local map_sprite = mget(map_x,map_y) -- find what sprite is at map x,y 
	local flag = fget(map_sprite) -- and get what flag it has set
	return flag == 128 -- I'm using the last flag (128) for signs
end

-->8
-- conversation and text functions
function conversation_system()
	-- level0 == no conversation
	-- level1 == player can choose to start conversation
	-- level2 == player now in a conversation
	if conversation_state == "level1" then
		new_conversation({"press x to talk"})
		if (btnp(‚ùé)) then						
			conversation_state = "level2"
		end	
	elseif conversation_state == "level2" and talking_to == "brian" then				
		new_conversation({"ruff! i'm brian!"}) 		
		if (btnp(‚ùé)) then		
			conversation_state = "level3"
		end
	elseif conversation_state == "level3" and talking_to == "brian" then		
		new_conversation({"oh really?", "a 2nd line of text","and even a third","but four is our limit!"})

	elseif conversation_state == "sign" and player.x < 120 then
		new_conversation({"press x to read sign"})
		if (btnp(‚ùé)) then		
			conversation_state = "sign2"			
		end
	elseif conversation_state == "sign2" then
		new_conversation({"it says 'owls house this way' "})		

	elseif conversation_state == "sign" and player.x > 120 then
		new_conversation({"press x to read sign"})
		if (btnp(‚ùé)) then		
			conversation_state = "sign3"			
		end
	elseif conversation_state == "sign3" then
		new_conversation({"'i'm very busy you know..."})
	end
end

function format_text_centered(array, colour)
	-- only used for menu currently
	height = 50
	for i in all(array) do
		print(i,64-#i*2, height, colour)
		height += 6
	end
end

function init_conversation_text()
	text = {} -- create empty array to store multiple strings
	text.active = false -- initialise to false
	text.string = {} -- empty array to store individual string?
	conversation_state = "level0" -- semi-related code
	talking_to = "nobody" -- semi-related code
end

function new_conversation(txt)
	text.string = txt -- enter received string(s) into array
	text.active = true
end

function draw_conversation()	
	-- currently I just draw this in the middle of the screen
	-- I want to draw it at the bottom UNLESS player y >= 188, in which case I'll draw at top of screen
	
	-- determine longest line of text
	local maxTextWidth = 0
	for i=1, #text.string do 
		if #text.string[i] > maxTextWidth then -- loop through array and find longest text element
			maxTextWidth = #text.string[i] -- set max width to longest element so box wide enough
		end
	end

	-- define textbox with border
	local textbox_x = camera_x + 64 - maxTextWidth *2 -1 -- -1 for border
	local textbox_y = 100
	local textbox_width = textbox_x+(maxTextWidth*4)  -- *4 to account for character width
	local textbox_height = textbox_y + #text.string * 6

	-- draw outer border text box
	rectfill(textbox_x-2, textbox_y-2, textbox_width+2, textbox_height+2, 0)
	rectfill(textbox_x, textbox_y, textbox_width, textbox_height, 12)

	-- write text
	for i=1, #text.string do  -- the # gets the legnth of the array 'text'
		local txt = text.string[i]
		-- local tx = textbox_x +1 -- add 1 pixel of outside of box and text
		local tx = camera_x + 64 - #txt * 2 -- centre text based on length of string txt
		local ty = textbox_y -5+(i*6) -- padding for top of box but because for loop starts at 1 we need to subtract 5		
		print(txt, tx, ty, 0)
	end
end

-- Brian conversation
brian_talk={}
brian_talk[1] = "woof?"
brian_talk[2] = "bark"
brian_talk[3] = "*sniff sniff*"
brian_talk[4] = "yip!"
brian_talk[5] = "whimper..."

text_array = {}
text_array[1] = "furlock bones"
text_array[2] = "the case of the lost animals"
text_array[3] = ""
text_array[4] = ""
text_array[5] = ""
text_array[6] = ""
text_array[7] = "press x to start"

other_array = {}
other_array[1] = "this"
other_array[2] = "is some other"
other_array[3] = "text"
other_array[4] = "which is"
other_array[5] = "aligned to the left"

-->8
-- back of house functions

-- function toggle_debug_mode()	
-- 	if (btnp(üÖæÔ∏è)) and (debug_mode == false) then
-- 		debug_mode = true	
-- 	elseif (btnp(üÖæÔ∏è)) and (debug_mode == true) then
-- 	  	debug_mode = false
-- 	end	
-- end

function log(text,overwrite) -- external logging file
		printh(text, "log", overwrite)
end

function compressmap(h,v,x,y)
	local r,b6,c6,n,c,lc="",0,0,0
	function to6(a)
		for i=1,#a do
		for j=0,7 do
			if (band(a[i],2^j)>0) c6+=2^b6
			b6+=1
			if (b6==6) r=r..chr6[c6] c6=0 b6=0
		end
		end
	end
	to6({x,y}) x-=1 y-=1
	for i=0,y do
		for j=0,x do
		c=mget(h+j,v+i)
		if (c==lc) n+=1
		if c!=lc or (j==x and i==y) then
			if n<2 then
			for k=0,n do
				to6({lc})
			end
			else
			to6({255,n,lc})
			end
			lc=c n=0
		end
		end
	end
	to6({c,0})
	return r
end

function decompressmap(h,v,t)
	local r,b6,c6,cp,n=t,0,0,1,0
	function to8()
	local s=0
		for i=0,7 do
		if (b6==0) c6=asc6[sub(r,cp,cp)] cp+=1
		if (band(c6,2^b6)>0) s+=2^i
		b6=(b6+1)%6
		end
		return s
	end
	local x,y,xp,yp,c=to8()-1,to8()-1,h,v
	repeat
		if n>0 then
		n-=1
		else
		c=to8()
		if (c==255) n=to8() c=to8()
		end
		mset(xp,yp,c)
		--spr(c,xp*8,yp*8)
		xp+=1
		if (xp>h+x) xp=h yp+=1
		if (yp>v+y) return
	until forever
end

-- maps
owen="qa_?ce-?ja-?ciqabaaadmaadm-?ea6ace-?ea-aam-aa2-?ca6a??qc?pqba2aaam-aaaabay6bf<5caqabaa6bfaaaeqaaa2aaaqab?laaguaaaqab?taaeaaa?l6bf<)aa<)bea6bgaaafu-?daabe<?aa<)ag<pda<?ag<)aa2-?1a-b?}aai2-b?)aai6-?c2-?ja-?c6aca"
map0 = "ac_?@m=?t<6rh>pbp<ppam=? a6c?l_dgj[qh>?ap<ppam=?0aafli=d8<6ipi=d8<6i?5-dej{uf>?ap<ppam=?!a-?m-ahn<pbpy{v?t-d?+da9<)ja&7g?p-g%<)b1-rdpm_dpy]z?t-d?+da9<?iaauq9&=?n&_?c-ahny]z?t-d?+da9<?iaavu9<_k7[si*e8l7;si*[=g%<?a1-63}_rd?l-d?+da9<5jam=?l<-h,;8l*<)a([sl);-?c<-?<a-i?xca9<)gp<ppam=? a-i?,_d?+da9<5jam=?.<-?<a-i?xca9<?vam=? a-i?5fa9<5jam=?xb-i?xca9<?vam=? a-i?5faaa"

__gfx__
000000000000000000000000000700070007000700000000333bb3b133ab133300000000444b444bbbbbbbccbbbbbccc55555555cccccccc555ccc7ccccccccc
00000000000700070007000700077777000777770005000533331133b311333300000000444444bbbbbbbcccbbbbcccc455454457ccccc7c55cccccccccc7ccc
007007000007777700077777700717717007177100044444ab3331133133a3ba00000000444444bbbbbbccccbbbccccc44444444cccccccc5ccccccccccccccc
000770007007177170071771700777e7700777e750041441aab13331333b3baa0000000044444bbbbbbbccccbbbbcccc44444444cccccccccccccccccccccc7c
00077000700777e7700777e70776686007766860500444e4ab13b331133311ba00000000444b444bbbbcccccbbbbcccc44444444cccccccccc7cccccc7cccccc
00700700077668600776686007777770077777700444444033bb113113ab333300000000444444bbbbbbccccbbbbcccc444444445ccc7ccccccccccccccccccc
00000000077777700777777070d0070670d0706004444440131133344311bb33000000004444bbbbbbbbccccbbbbcccc4444444455cccccccccccc7ccccccccc
00000000171d7160171d17160111110001111100141d4140333ab31111b31133000000004b44b4bbbbbcccccbbbbbccc44444444555ccccccccccccccccccccc
bbbbbbbbbbbbbbbbbbbbb9bbc44cc44cb44bb44bbbb33bbb33ab1333333bb3b100000000b444b444444444444444444455d5cccc44444444bbbbbbbbccccc555
bbbbbbbbbbbbbbbbbbbb9bbb9999999999999999bb31b3bbb31133333333113300000000bb4444444444d44444444444455d55cc44444444bbbbbbbbcccccc55
bbbbddbbbb224444444944bb4444444444444444b33b331b3133a3baab33311300000000bb44444444444d44444444444455555c544545545bb5b55bccc7ccc5
bbbd6ddbb22229949994944b4224242442242424b13aa33b333b3baaaab1333100000000bbb444444dd444444444444444455d55555d5555555d5555cccccccc
bbd6dd5bb21222244244224b424224244242242433b5ab33133311baab13b33100000000b444b444444d44444444444444445555555d5d55555d5d55cccccccc
b35dd553b22124442444441b4444444444444444313bb31113ab333333bb113100000000bb44444444444dd444444444444445555d55dd5d5d55dd5dcccccccc
bb35553bb12242122221223bc22cc22cb22bb22b13bb1b314311bb331311333400000000bbbb44444444d4444444444444444455d555d55dd555d55dc7ccccc7
bbbbbbbb3311111111111133c22cc22c322332233113b33111b31133333ab31100000000bb4b44b44444444444444444444444455d5555d55d5555d5cccccccc
bbb88bbb44488444ccc88ccc65666566777777771b333111bbbbb333333bbbbb0000000044444444444444444444444454454554444444444444444444444444
bb8f82bb448f8244cc8f82c7555555557666666511b3bb11bbbb33333333bbbb00000000444444444444d4444444444455555555444444444444444444444444
b88882bb48888244cc8882cc666566657666666531333313bbb3a3baab333bbb000000004444444444444dd454454554555d555d544545545445455445545445
8f888e228f888e22c8888e2c5555555576666665b311113bbb3b3baaaab133bb0000000044444444444d44445555555555dd5d55555d5555555d5555555d5555
8888222288882222c8f8222c6566656676666665bb3223bbb33311baab13b33b00000000444444444dd4444455d55555d55d5d5d555d5d555555555555d55555
bb8222bb55822255cc8222cc5555555576666665bb1442bb33ab333333bb113300000000444b444444444d44c55555555d55dd5d5d55dd5d5555555d55555d5c
bb3113bb555115557cc11ccc6665666576666665314344133b11bb33131133b3000000004bbb4b444444d444c555d555d555d55dd555d55dd5555555555555cc
b322223b55222255cc2222cc5555555555555555b333133b31b31133333ab31300000000bbbbbbb444444444cc55555555d555d555d555d555dd55d555555ccc
bbbbbbbbbbbbbbbbbbbbbbbb444884440000000000000000131bb3b133ab1131000000004bbbbbbb444444444444444400000000000000000000000000000000
bbbbbbbbbbb3bbbbbbbbbbbb448f82440000000000000000b1111133b311311b0000000044b4bbb444444444444d444400000000000000000000000000000000
bbbbddbbb33bbbbbbbbbbbbb488882440000000000000000bb11b113313311bb00000000b444b4b4444444444dd4444400000000000000000000000000000000
bbbd6ddbbbbb3bbbbbbbbbbb8f888e220000000000000000bbb1113133111bbb0000000044b4b444444444444444d44400000000000000000000000000000000
bbd6dd5bbbbbb33bbbbbbbbb888822220000000000000000bbb3111111113bbb00000000444444444444444444444dd400000000000000000000000000000000
b35dd553bb3bbbbbbbbbbbbb448222440000000000000000bb314211112413bb00000000444444444444444444d4444400000000000000000000000000000000
bb35553bbbb3bbbbbbbbbbbb444114440000000000000000b31421244212413b000000004444444444444444444d444400000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbb442222440000000000000000bb331441144133bb0000000044444444444444444444444400000000000000000000000000000000
bbbbbbbbbbbbbbbb333bb3b133ab133333aaa333333aaa33ccccc333333ccccc0000000000000000bbbbbbbbbbbbbb4444bbbbbbbbbbbbbb0000000000000000
bbbbbbbbbbbbbbbb33331133b311333333bab333333bab33cccc33333333cccc0000000000000000bbbbbbbbbbbb44999944bbbbbbbbbbbb0000000000000000
bbbbbdddddddbbbbab3331133133a3ba333b13b11b31b333ccc3a3baab333ccc0000000000000000bbbbbbbbbb4494aaa94944bbbbbbbbbb0000000000000000
bbbbdd6d666ddbbbaab13331333b3baac3a313b11b313a3ccc3b3baaaab133cc0000000000000000bbbbbbbb449494aaaa444944bbbbbbbb0000000000000000
bbbddddddd66ddbbab13b331133311bacc3b3b1331b3b3ccc33311baab13b33c0000000000000000bbbbbb44949444aaa949494944bbbbbb0000000000000000
bbdddddddddd6ddb33bb113113ab3333ccc13a1bb1a31ccc33ab333333bb11330000000000000000bbbb4494949494aaaa4949444944bbbb0000000000000000
bb55dddddd55dddb131133344311bb33cccc11b11b11cccc3b11bb33131133b30000000000000000bb449494949494aaaa494449494944bb0000000000000000
b5555ddd66dd555b333ab31111b31133ccccc111111ccccc31b31133333ab3130000000000000000449494449444a444444a4949494449440000000000000000
b55dd5d66dd5155b33ab1333333bb3b10000000000000000131bb3b11b3bb13100000000000000002494949494a4442222444a49444949420000000000000000
b151dddddd55155bb3113333333311330000000000000000c11111333311111c000000000000000044949494a44422111122444a494949440000000000000000
33151dddd55551333133a3baab3331130000000000000000cc11b113311b11cc0000000000000000249444a444221111111122444a4944420000000000000000
b33111555511133b333b3baaaab133310000000000000000ccc111b11b111ccc00000000000000002494a4442211112222111122444a49420000000000000000
bb333311113333bb133311baab13b3310000000000000000cccc11133111cccc000000000000000024a44422111122222222111122444a420000000000000000
bbbb33333333bbbb13ab333333bb11310000000000000000ccccdd1111ddcccc0000000000000000244422111122222442222211112244420000000000000000
bbbbbbbbbbbbbbbb4311bb33131133340000000000000000cccc6d5dd5d6cccc0000000000000000242211112222244444422222111122420000000000000000
bbbbbbbbbbbbbbbb11b31133333ab3110000000000000000cccc26555566cccc0000000000000000211111222224444444444222221111120000000000000000
000000000000000000000000000000000000000000000000cccc26566562cccc0000000000000000111112222444444444444442222111110000000000000000
000000000000000000000000000000000000000000000000cccc62555566cccc0000000000000000b112122444111144444111444221211b0000000000000000
000000000000000000000000000000000000000000000000cccc66566526cccc0000000000000000bb1221444111111444111114441221bb0000000000000000
000000000000000000000000000000000000000000000000cccc62555566cccc0000000000000000b312242241111114441111142242213b0000000000000000
000000000000000000000000000000000000000000000000cccc66566562cccc0000000000000000b311244441111914441111144442113b0000000000000000
000000000000000000000000000000000000000000000000cccc26555526cccc00000000000000003312124441111414442222244421213b0000000000000000
000000000000000000000000000000000000000000000000cccc66566566cccc00000000000000003331142241111114444444442241133b0000000000000000
000000000000000000000000000000000000000000000000cccc66555566cccc0000000000000000b333311441111114424224244113333b0000000000000000
00000000000000000000000000000000000000000000000055556256652655550000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000054546655556645450000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000044442656656244440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000044446655552644440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000044442656656244440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000044466255556664440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000044626156651626440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000046261651156162640000000000000000000000000000000000000000000000000000000000000000
__label__
65666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
66656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
65666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
66656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
5555555533333cccccc3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
666566653343cccccccc333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
555555553333cc77c77c333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
656665663333cc71c71c334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
555555553333cccccccc333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
6665666533431cccccc1333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333311111111333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333335433543334377777777777777777777777777777777333333433333334377777777777777777777777777777777333333433333334365666566
55555555333333333333333376666665766666657666666576666665333333333333333376666665766666657666666576666665333333333333333355555555
66656665334333333343333376666665766666657666666576666665334333333343333376666665766666657666666576666665334333333343333366656665
55555555333333333333333376666665766666657666666576666665333333333333333376666665766666657666666576666665333333333333333355555555
65666566333333433333334376666665766666657666666576666665333333433333334376666665766666657666666576666665333333433333334365666566
55555555333333333333333376666665766666657666666576666665333333333333333376666665766666657666666576666665333333333333333355555555
66656665334333333343333376666665766666657666666576666665334333333343333376666665766666657666666576666665334333333343333366656665
55555555333333333333333355555555555555555555555555555555333333333333333355555555555555555555555555555555333333333333333355555555
65666566333333433333334377777777111111111111111177777777333333433333334377777777111111111111111177777777333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111cc111111cc11176666665334333333343333376666665111cc111111cc11176666665334333333343333366656665
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
6566656633333343333333437666666511cc1cc111cc1cc17666666533333343333333437666666511cc1cc111cc1cc176666665333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111111111111111176666665334333333343333376666665111111111111111176666665334333333343333366656665
55555555333333333333333355555555111111111111111155555555333333333333333355555555111111111111111155555555333333333333333355555555
65666566333333433333334377777777111111111111111177777777333333433333334377777777111111111111111177777777333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111cc111111cc11176666665334333333343333376666665111cc111111cc11176666665334333333343333366656665
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
6566656633333343333333437666666511cc1cc111cc1cc17666666533333343333333437666666511cc1cc111cc1cc176666665333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111111111111111176666665334333333343333376666665111111111111111176666665334333333343333366656665
55555555333333333333333355555555111111111111111155555555333333333333333355555555111111111111111155555555333333333333333355555555
65666566333333433333334377777777111111111111111177777777333333433333334377777777111111111111111177777777333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111cc111111cc11176666665334333333343333376666665111cc111111cc11176666665334333333343333366656665
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
6566656633333343333333437666666511cc1cc111cc1cc17666666533333343333333437666666511cc1cc111cc1cc176666665333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111111111111111176666665334333333343333376666665111111111111111176666665334333333343333366656665
55555555333333333333333355555555111111111111111155555555333333333333333355555555111111111111111155555555333333333333333355555555
65666566333333433333334377777777111111111111111177777777333333433333334377777777111111111111111177777777333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111cc111111cc11176666665334333333343333376666665111cc111111cc11176666665334333333343333366656665
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
6566656633333343333333437666666511cc1cc111cc1cc17666666533333343333333437666666511cc1cc111cc1cc176666665333333433333334365666566
55555555333333333333333376666665111111111111111176666665333333333333333376666665111111111111111176666665333333333333333355555555
66656665334333333343333376666665111111111111111176666665334333333343333376666665111111111111111176666665334333333343333366656665
55555555333333333333333355555555111111111111111155555555333333333333333355555555111111111111111155555555333333333333333355555555
65666566333333433333334377777777777777777777777777777777333333433333334377777777777777777777777777777777333333433333334365666566
55555555333333333333333376666665766666657666666576666665333333333333333376666665766666657666666576666665333333333333333355555555
66656665334333333343333376666665766666657666666576666665334333333343333376666665766666657666666576666665334333333343333366656665
55555555333333333333333376666665766666657666666576666665333333333333333376666665766666657666666576666665333333333333333355555555
65666566333333433333334376666665766666657666666576666665333333433333334376666665766666657666666576666665333333433333334365666566
55555555333333333333333376666665766666657666666576666665333333333333333376666665766666657666666576666665333333333333333355555555
66656665334333333343333376666665766666657666666576666665334333333343333376666665766666657666666576666665334333333343333366656665
55555555333333333333333355555555555555555555555555555555333333333333333355555555555555555555555555555555333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334365666566
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
66656665334333333343333333433333334333333343333333433333334333333343333333433333334333333343333333433333334333333343333366656665
55555555333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333355555555
65666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
66656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
65666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
66656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665666566656665
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555

__gff__
0000000000020000800000000000010100010180800100000100000000000001010001010101010100000000010000000000000000000101000000000000000001010000010101010100000000000101010100000100010100000000000001010101000100000101000000000000010101010001000001010000000000000101
0101000001000001010100000000000001010000010000010101000000000000010101010100000001010000000000000101010001010000010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
232323232323232323232323232323232323232323232323232323232323232323232323232323230f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f46470f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2332323232323232323232323232323200000000000000000000000000000000000000000000000a0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f464243470f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
23324a4b4c4d3232323232323232323200000000000000000000000000000000000000000000140b220f220f220f220f220f220f0f0f0f0f0f0f0f445253450f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
23325a5b5c5d323232323232323232320000000000000000000000000000000000000000000000000c0c0c0c0c0c0c0c0c0c0c0c0c1c0d0f0f0f0f0f56570f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
23326a6b6c6d323232323232323232320000000000000000000000000000000000000000000000001b1a1b1b1b1b2a1b1b1b1b1b1b1b1c0d0f130f0f66670f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
233232323232323232323232323232320000000000000000000000000000000000000000004041232b331b331b331b331b331b331b1b1b0c0c0c1c0d66670f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
233232323232323232323232323232320000000000000000000000000000000000000000005051231f2b2c2c2c2c2c2c2c2c2c2c2d1b2a1b1b1b1b0c76771c0d0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
233232323232323232323232323232320000000000000000000000000000000000000000000000230f0f0f0f0f0f0f0f0f0f0f0f1f2b2e2e2d2e2e2e2d2d2f0e0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
233232323232323232323232323232320000000000000000000000000000000000000000000000230f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
230000000000000000000000000000000000000000000000000000000000000000000000000000230f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
230000000000000000000000000000000000000000000000000000000000000000000000000000230f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2300000000000000000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2323232323232323232323232323232323232323232323232323232323232323232323232323232300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0006000007550095501d500205001b5001f5000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
